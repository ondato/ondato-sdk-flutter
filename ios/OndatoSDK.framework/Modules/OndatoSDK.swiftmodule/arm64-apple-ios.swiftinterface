// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name OndatoSDK
import AVFoundation
import AVKit
import CoreGraphics
import FaceTecSDK
import Foundation
import MobileCoreServices
@_exported import OndatoSDK
import Photos
import ReplayKit
import Swift
import UIKit
@objc(OndatoError) public enum OndatoServiceError : Swift.Int, Swift.Codable, Swift.Error {
  case cancelled
  case invalidServerResponse
  case invalidCredentials
  case unexpectedInternalError
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(OndatoService) public class OndatoService : ObjectiveC.NSObject {
  public static var shared: OndatoSDK.OndatoService
  @objc public var flowDelegate: OndatoSDK.OndatoFlowDelegate?
  @objc public var configuration: OndatoSDK.OndatoServiceConfiguration
  @objc public var identificationId: Swift.String {
    @objc get
    @objc set(value)
  }
  @objc public func initialize(username: Swift.String, password: Swift.String)
  @objc public func initialize(accessToken: Swift.String)
  @objc public func instantiateOndatoViewController() -> OndatoSDK.OndatoMainViewController
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(OndatoAppearance) public class OndatoAppearance : ObjectiveC.NSObject {
  @objc public var consentWindow: OndatoSDK.OndatoConsentAppearance
  @objc public var progressColor: UIKit.UIColor
  @objc public var errorColor: UIKit.UIColor
  @objc public var errorTextColor: UIKit.UIColor
  @objc public var buttonColor: UIKit.UIColor
  @objc public var buttonTextColor: UIKit.UIColor
  @objc public var logoImage: UIKit.UIImage?
  @objc public var regularFontName: Swift.String?
  @objc public var mediumFontName: Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(OndatoGDRPAppearance) public class OndatoConsentAppearance : ObjectiveC.NSObject {
  @objc public var header: OndatoSDK.OndatoLabelAppearance
  @objc public var body: OndatoSDK.OndatoTextViewAppearance
  @objc public var acceptButton: OndatoSDK.OndatoButtonAppearance
  @objc public var declineButton: OndatoSDK.OndatoButtonAppearance
  @objc override dynamic public init()
  @objc deinit
}
@objc(OndatoButtonAppearance) public class OndatoButtonAppearance : ObjectiveC.NSObject {
  @objc public var font: UIKit.UIFont
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var tintColor: UIKit.UIColor
  @objc public var borderWidth: CoreGraphics.CGFloat
  @objc public var borderColor: UIKit.UIColor
  @objc public var cornerRadius: CoreGraphics.CGFloat
  public init(font: UIKit.UIFont = .systemFont(ofSize: 15), backgroundColor: UIKit.UIColor = .clear, tintColor: UIKit.UIColor = .systemBlue, borderWidth: CoreGraphics.CGFloat = 0, borderColor: UIKit.UIColor = .clear, cornerRadius: CoreGraphics.CGFloat = 0)
  @objc override dynamic public init()
  @objc deinit
}
@objc(OndatoLabelAppearance) public class OndatoLabelAppearance : ObjectiveC.NSObject {
  @objc public var font: UIKit.UIFont
  @objc public var color: UIKit.UIColor
  public init(font: UIKit.UIFont = .systemFont(ofSize: 15, weight: .semibold), color: UIKit.UIColor = .black)
  @objc override dynamic public init()
  @objc deinit
}
@objc(OndatoTextViewAppearance) public class OndatoTextViewAppearance : ObjectiveC.NSObject {
  @objc public var font: UIKit.UIFont
  @objc public var textColor: UIKit.UIColor
  public init(font: UIKit.UIFont = .systemFont(ofSize: 15), textColor: UIKit.UIColor = .black)
  @objc override dynamic public init()
  @objc deinit
}
@objc(OndatoSupportedLanguage) public enum OndatoSupportedLanguage : Swift.Int, Swift.RawRepresentable {
  case DE
  case EN
  case ET
  case LT
  case LV
  case RU
  public typealias RawValue = Swift.String
  public var rawValue: OndatoSDK.OndatoSupportedLanguage.RawValue {
    get
  }
  public var displayName: Swift.String {
    get
  }
  public init?(rawValue: OndatoSDK.OndatoSupportedLanguage.RawValue)
}
extension OndatoSupportedLanguage : Swift.CaseIterable {
  public typealias AllCases = [OndatoSDK.OndatoSupportedLanguage]
  public static var allCases: [OndatoSDK.OndatoSupportedLanguage] {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class OndatoMainViewController : UIKit.UINavigationController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
  @available(iOS 5.0, *)
  @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
@objc @_inheritsConvenienceInitializers public class OndatoLog : ObjectiveC.NSObject {
  public static var shared: OndatoSDK.OndatoLog
  public var logs: [Swift.String] {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(OndatoServerMode) public enum OndatoEnvironment : Swift.Int {
  case test = 0
  case live = 1
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(OndatoFlowDelegate) public protocol OndatoFlowDelegate {
  @objc optional func viewControllerForStart(startPressed: @escaping () -> Swift.Void) -> UIKit.UIViewController
  @objc optional func viewForLoading(progress: Swift.Float) -> UIKit.UIView?
  @objc optional func viewForSuccess(continue: @escaping () -> Swift.Void) -> UIKit.UIView
  @objc func flowDidSucceed(identificationId: Swift.String?)
  @objc func flowDidFail(identificationId: Swift.String?, error: OndatoSDK.OndatoServiceError)
}
@_inheritsConvenienceInitializers @objc(OndatoServiceConfiguration) public class OndatoServiceConfiguration : ObjectiveC.NSObject {
  @objc public var appearance: OndatoSDK.OndatoAppearance
  @objc public var flowConfiguration: OndatoSDK.OndatoFlowConfiguration
  @objc public var recorderConfiguration: OndatoSDK.OndatoRecorderConfiguration
  @objc public var mode: OndatoSDK.OndatoEnvironment
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(OndatoFlowConfiguration) public class OndatoFlowConfiguration : ObjectiveC.NSObject {
  @objc public var showSplashScreen: Swift.Bool
  @objc public var showStartScreen: Swift.Bool
  @objc public var showConsentScreen: Swift.Bool
  @objc public var showSelfieAndDocumentScreen: Swift.Bool
  @objc public var showSuccessWindow: Swift.Bool
  @objc public var ignoreLivenessErrors: Swift.Bool
  @objc public var ignoreVerificationErrors: Swift.Bool
  @objc public var recordProcess: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(OndatoRecorderConfiguration) public class OndatoRecorderConfiguration : ObjectiveC.NSObject {
  @objc public var bitrate: Swift.Int
  @objc public var resolutionRatio: Swift.Float
  @objc override dynamic public init()
  @objc deinit
}
@objc(OndatoDocumentType) public enum OndatoDocumentType : Swift.Int, Swift.Codable {
  case passport = 0
  case idCard = 1
  case drivingLicence = 2
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(OndatoLocalizeHelper) public class OndatoLocalizeHelper : ObjectiveC.NSObject {
  @objc public static var language: OndatoSDK.OndatoSupportedLanguage
  @objc public static func setLocalizationBundle(_ bundle: Foundation.Bundle, for language: OndatoSDK.OndatoSupportedLanguage)
  @objc deinit
}
